name: Aqua Engine

on: [ push, pull_request ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            triplet: 'x64-windows-static'
          }
        # Disabling Linux cloud builds until further notice
        # - {
        #     name: "Linux",
        #     os: ubuntu-latest,
        #     triplet: 'x64-linux'
        #   }
        - {
            name: "MacOS",
            os: [ macOS, arm64, self-hosted ],
            triplet: 'arm64-osx'
          }

    # Get source
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    # Install pre-requisites
    - uses: lukka/get-cmake@latest

    - if: matrix.config.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev xorg-dev zlib1g-dev

    - uses: actions/cache@v3
      with:
        path: build/vcpkg_installed
        key: ${{ matrix.config.name }}-vcpkg_cache

    - name: VCPKG
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgDirectory: '${{ github.workspace }}/Engine/Vendor/vcpkg'
      env:
        VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

    # Set CMake configuration based on branch
    - if: github.ref == 'refs/heads/main' && matrix.config.name != 'Windows'
      run: echo "CMAKE_CONFIG=Release" >> $GITHUB_ENV

    - if: github.ref != 'refs/heads/main' && matrix.config.name != 'Windows'
      run: echo "CMAKE_CONFIG=RelWithDebInfo" >> $GITHUB_ENV

    - if: github.ref == 'refs/heads/main' && matrix.config.name == 'Windows'
      run: echo "CMAKE_CONFIG=Release" >> $env:GITHUB_ENV

    - if: github.ref != 'refs/heads/main' && matrix.config.name == 'Windows'
      run: echo "CMAKE_CONFIG=RelWithDebInfo" >> $env:GITHUB_ENV

    # Set binary directory based on OS
    - if: matrix.config.name == 'Windows'
      run: echo "BINARY_DIR=${{ github.workspace }}/build/bin/${{ env.CMAKE_CONFIG }}" >> $env:GITHUB_ENV

    - if: matrix.config.name != 'Windows'
      run: echo "BINARY_DIR=${{ github.workspace }}/build/bin/" >> $GITHUB_ENV

    # Configure CMake
    - name: Configure
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.CMAKE_CONFIG }}

    # Build AquaScriptCore C# project manually on Unix systems
    - name: Build AquaScriptCore
      if: matrix.config.name != 'Windows'
      run: msbuild Apps/AquaScriptCore/AquaScriptCore.csproj -verbosity:diag -property:Configuration=Release

    # Build
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.CMAKE_CONFIG }}

    # Test
    - name: Run Test
      run: ${{ env.BINARY_DIR }}/AquaEngineTest

    # Read engine version from text file
    - uses: juliangruber/read-file-action@v1
      id: readFile
      with:
        path: ./Version.txt

    # Create installation package
    - name: Package
      run: cd ${{ github.workspace }}/build; cpack

    # Upload generated artifact
    - uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: AquaEngine-${{ matrix.config.name }}-${{ steps.readFile.outputs.content }}
        path: ${{ env.BINARY_DIR }}/build/Aqua\ Editor\ v*
