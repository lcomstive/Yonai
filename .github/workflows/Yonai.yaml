name: Yonai Engine

on: [ push ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            generator: "Visual Studio 17 2022",
            options: "-DBUILD_SHARED_LIBS=OFF"
          }
        - {
            name: "Linux",
            os: ubuntu-latest,
            generator: "Ninja",
            options: "-DBUILD_SHARED_LIBS=ON"
          }
        - {
            name: "MacOS",
            os: macOS-latest,
            generator: "Unix Makefiles",
            options: "-DBUILD_SHARED_LIBS=ON"
          }

    # Get source
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    # Install pre-requisites
    - uses: lukka/get-cmake@latest

    - if: matrix.config.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev xorg-dev zlib1g-dev ninja-build

    - if: matrix.config.os == 'windows-latest'
      run: choco install mono

    # Vulkan SDK
    - name: Prepare Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: 1.3.204.0
        vulkan-components: Vulkan-Headers, Vulkan-Loader, Vulkan-ExtensionLayer
        vulkan-use-cache: true

    # Set CMake configuration based on branch
    - if: github.ref == 'refs/heads/main' && matrix.config.name != 'Windows'
      run: echo "CMAKE_CONFIG=Release" >> $GITHUB_ENV

    - if: github.ref != 'refs/heads/main' && matrix.config.name != 'Windows'
      run: echo "CMAKE_CONFIG=RelWithDebInfo" >> $GITHUB_ENV

    - if: github.ref == 'refs/heads/main' && matrix.config.name == 'Windows'
      run: echo "CMAKE_CONFIG=Release" >> $env:GITHUB_ENV

    - if: github.ref != 'refs/heads/main' && matrix.config.name == 'Windows'
      run: echo "CMAKE_CONFIG=RelWithDebInfo" >> $env:GITHUB_ENV

    # Set binary directory based on OS
    - if: matrix.config.name == 'Windows'
      run: echo "BINARY_DIR=${{ github.workspace }}/build/bin/${{ env.CMAKE_CONFIG }}" >> $env:GITHUB_ENV

    - if: matrix.config.name != 'Windows'
      run: echo "BINARY_DIR=${{ github.workspace }}/build/bin/" >> $GITHUB_ENV

    # Restore CMake build cache
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.config.name }}-${{ env.CMAKE_CONFIG }}

    # Configure CMake
    - name: Configure
      run: cmake -B ${{ github.workspace }}/build -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ env.CMAKE_CONFIG }} ${{ matrix.config.options }} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    # Build YonaiScriptCore C# project manually on Unix systems
    - name: Build C# Bindings
      if: matrix.config.name != 'Windows'
      run: |
        msbuild Apps/YonaiScriptCore/YonaiScriptCore.csproj -property:Configuration=Release
        msbuild Apps/YonaiScriptEditor/YonaiScriptEditor.csproj -property:Configuration=Release

    # Build
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.CMAKE_CONFIG }}

    # Test
    - name: Run Test
      run: ${{ env.BINARY_DIR }}/YonaiTest

    # Read engine version from text file
    - uses: juliangruber/read-file-action@v1
      id: readFile
      with:
        path: ./Version.txt

    # Create installation package
    - name: Package
      run: cd ${{ github.workspace }}/build; cpack -C ${{ env.CMAKE_CONFIG }}

    # Upload generated artifact
    - uses: actions/upload-artifact@v3
      if: matrix.config.name != 'Windows'
      with:
        if-no-files-found: error
        name: YonaiEngine-${{ matrix.config.name }}-${{ steps.readFile.outputs.content }}-${{ github.ref_name }}
        path: ${{ github.workspace }}/build/Yonai\ v*

    - uses: actions/upload-artifact@v3
      if: matrix.config.name == 'Windows'
      with:
        if-no-files-found: error
        name: YonaiEngine-${{ matrix.config.name }}-${{ steps.readFile.outputs.content }}-${{ github.ref_name }}
        path: ${{ github.workspace }}\build\Yonai v*
