#pragma once
#include <memory>
#include <string>
#include <functional>
#include <unordered_map>
#include <spdlog/spdlog.h>
#include <AquaEngine/World.hpp>
#include <mono/metadata/assembly.h>
#include <AquaEngine/Scripting/Class.hpp>

namespace AquaEngine
{
	namespace Components { struct Component; }
}

namespace AquaEngine::Scripting
{
	// Forward declaration for 'friend' below
	class ScriptEngine;

	struct Assembly
	{
		struct ManagedComponentData
		{
			size_t Type;

			/// <summary>
			/// Component* (World* world, unsigned int entityID).
			/// Returns created instance of component matching type <see cref="Type" />
			/// </summary>
			std::function<Components::Component* (World*, unsigned int)> AddFn;
		};

		struct ManagedSystemData
		{
			size_t Type;

			/// <summary>
			/// System* (World* world).
			/// Returns created instance of system matching type <see cref="Type" />
			/// </summary>
			std::function<Systems::System* (SystemManager*)> AddFn;
		};

	private:
		/// <summary>
		/// Key:	Managed type index,					generated by Mono
		/// Value:  Struct containing hash of
		///				unmanaged (C++) component (hash code of type_info),
		///				and function for when component is added to an entity
		/// </summary>
		static std::unordered_map<size_t, ManagedSystemData> s_InternalManagedSystemTypes;
		static std::unordered_map<size_t, ManagedComponentData> s_InternalManagedComponentTypes;

		std::vector<MonoClass*> m_ManagedSystemTypes = {};
		std::vector<MonoClass*> m_ManagedComponentTypes = {};

		/// Maps AquaScriptCore managed to unmanaged components (e.g. Transform)
		void LoadScriptCoreTypes();
		
		Assembly(MonoAssembly* handle, bool isCoreAssembly);
		
		friend class AquaEngine::Scripting::ScriptEngine;

	public:
		MonoImage* Image;
		MonoAssembly* Handle;

		AquaAPI MonoClass* GetClassFromName(const char* namespaceName, const char* className);
		AquaAPI MonoType* GetTypeFromClassName(const char* namespaceName, const char* className);

		AquaAPI std::unique_ptr<Class> InstantiateClass(const char* namespaceName, const char* className);

		AquaAPI static size_t GetTypeHash(MonoType* type);
		AquaAPI static size_t GetTypeHash(MonoClass* monoClass);
		AquaAPI static MonoType* GetTypeFromHash(size_t hash);
		AquaAPI static ManagedSystemData GetManagedSystemData(size_t unmanagedType);
		AquaAPI static ManagedComponentData GetManagedComponentData(size_t unmanagedType);
	
	private:
		static std::unordered_map<MonoType*, size_t> s_TypeHashes;
		static std::unordered_map<size_t, MonoType*> s_ReverseTypeHashes;
		
		/// <summary>
		/// Hashes all types.
		/// Stores classes deriving AquaEngine.System in <see cref="m_ManagedSystemTypes" />.
		/// Stores classes deriving AquaEngine.Component in <see cref="m_ManagedComponentTypes" />
		/// </summary>
		void CacheTypes(bool isCore);
		void AddInternalCalls();

		// Clears s_TypeHashes & s_ReverseTypeHashes.
		// Intended to be used when reloading assemblies
		static void ClearCachedTypes();

		template<typename T>
		bool AddInternalManagedType(const char* managedNamespace, const char* managedName, size_t* managedHash)
		{
			MonoClass* klass = mono_class_from_name(Image, managedNamespace, managedName);
			if (!klass)
			{
				spdlog::warn("Failed to add internal managed component definition for '{}' - not found in assembly '{}'", managedName, mono_image_get_name(Image));
				return false;
			}

			MonoType* managedType = mono_class_get_type(klass);
			*managedHash = GetTypeHash(managedType);
			size_t hash = typeid(T).hash_code();

			// Store both native and non-native hashes of this type to the managed (C#) MonoType*
			s_TypeHashes.emplace(managedType, *managedHash);
			s_ReverseTypeHashes.emplace(hash, managedType);
			s_ReverseTypeHashes.emplace(*managedHash, managedType);

			return true;
		}

		template<typename T>
		void AddInternalManagedComponent(const char* managedNamespace, const char* managedName)
		{
			size_t managedHash = 0;
			size_t hash = typeid(T).hash_code();
			if (!AddInternalManagedType<T>(managedNamespace, managedName, &managedHash))
				return;

			s_InternalManagedComponentTypes.emplace(
				managedHash,
				ManagedComponentData
				{
					hash,
					[](World* world, EntityID entityID) -> Components::Component* { return world->AddComponent<T>(entityID); }
				}
			);
		}

		template<typename T>
		void AddInternalManagedSystem(const char* managedNamespace, const char* managedName)
		{
			size_t managedHash = 0;
			size_t hash = typeid(T).hash_code();
			if (!AddInternalManagedType<T>(managedNamespace, managedName, &managedHash))
				return;

			s_InternalManagedSystemTypes.emplace(
				managedHash,
				ManagedSystemData
				{
					hash,
					[](SystemManager* systemManager) -> Systems::System* { return systemManager->Add<T>(); }
				}
			);

		}
	};
}